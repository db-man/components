{"version":3,"file":"ddRender.js","names":["constants","ddRenderFnMapping","defaultRenders","NUMBER","val","STRING","STRING_ARRAY","join","BOOL","undefined","String","getRender","args","tplExtra","renderFn","fn","Array","isArray","renderFnName","record","index","getColumnRender","renderKey","column","customRender","type"],"sources":["../../src/ddRender/ddRender.ts"],"sourcesContent":["import * as constants from '../constants';\nimport DbColumn, { RenderKeyType } from '../types/DbColumn';\nimport { RowType } from '../types/Data';\nimport { RenderArgs } from '../types/UiType';\nimport ddRenderFnMapping from './ddRenderFnMapping';\n\n// Default render func when \"type:listPage\" or \"type:getPage\" not defined in db table column\nconst defaultRenders = {\n  [constants.NUMBER]: (val: number) => val,\n  [constants.STRING]: (val: string) => val,\n  [constants.STRING_ARRAY]: (val: string[]) => val && val.join(', '),\n  [constants.BOOL]: (val: boolean) => (val === undefined ? '' : String(val)),\n};\n\n/**\n * @param {string|string[]} args e.g. \"Link\" or [\"Link\", \"{{record.url}}\"]\n * @param {Object} tplExtra\n */\nexport const getRender = (args: RenderArgs, tplExtra?: any) => {\n  // the column render function defined in Table component of antd\n  // renderFn = (val, record, index) => ()\n  let renderFn;\n\n  if (!args) {\n    return renderFn;\n  }\n\n  if (typeof args === 'string') {\n    const fn = ddRenderFnMapping[args];\n    if (fn) {\n      renderFn = fn;\n    }\n  }\n\n  if (Array.isArray(args)) {\n    const [renderFnName] = args;\n    renderFn = (val: any, record: RowType, index?: number) =>\n      ddRenderFnMapping[renderFnName](val, record, index, args, tplExtra);\n  }\n\n  return renderFn;\n};\n\n/**\n * column def:\n * {\n *   \"type:listPage\": [\"Link\", \"{{record.url}}\"]\n * }\n */\nexport const getColumnRender = (\n  renderKey: RenderKeyType,\n  column: DbColumn,\n  tplExtra?: any\n) => {\n  const customRender = getRender(column[renderKey], tplExtra);\n  if (customRender) {\n    return customRender;\n  }\n\n  // the column render function defined in Table component of antd\n  // renderFn = (val, record, index) => ()\n  return defaultRenders[column.type || constants.STRING];\n};\n\n// export const getRenderResultByColumn = (\n//   value: any,\n//   record: RowType,\n//   index: number,\n//   args: RenderArgs,\n//   column: Column\n// ) => getColumnRender('type:listPage', column)(value, record, index);\n"],"mappings":"AAAA,OAAO,KAAKA,SAAS,MAAM,cAAc;AAIzC,OAAOC,iBAAiB,MAAM,qBAAqB;;AAEnD;AACA,MAAMC,cAAc,GAAG;EACrB,CAACF,SAAS,CAACG,MAAM,GAAIC,GAAW,IAAKA,GAAG;EACxC,CAACJ,SAAS,CAACK,MAAM,GAAID,GAAW,IAAKA,GAAG;EACxC,CAACJ,SAAS,CAACM,YAAY,GAAIF,GAAa,IAAKA,GAAG,IAAIA,GAAG,CAACG,IAAI,CAAC,IAAI,CAAC;EAClE,CAACP,SAAS,CAACQ,IAAI,GAAIJ,GAAY,IAAMA,GAAG,KAAKK,SAAS,GAAG,EAAE,GAAGC,MAAM,CAACN,GAAG;AAC1E,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMO,SAAS,GAAGA,CAACC,IAAgB,EAAEC,QAAc,KAAK;EAC7D;EACA;EACA,IAAIC,QAAQ;EAEZ,IAAI,CAACF,IAAI,EAAE;IACT,OAAOE,QAAQ;EACjB;EAEA,IAAI,OAAOF,IAAI,KAAK,QAAQ,EAAE;IAC5B,MAAMG,EAAE,GAAGd,iBAAiB,CAACW,IAAI,CAAC;IAClC,IAAIG,EAAE,EAAE;MACND,QAAQ,GAAGC,EAAE;IACf;EACF;EAEA,IAAIC,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,EAAE;IACvB,MAAM,CAACM,YAAY,CAAC,GAAGN,IAAI;IAC3BE,QAAQ,GAAGA,CAACV,GAAQ,EAAEe,MAAe,EAAEC,KAAc,KACnDnB,iBAAiB,CAACiB,YAAY,CAAC,CAACd,GAAG,EAAEe,MAAM,EAAEC,KAAK,EAAER,IAAI,EAAEC,QAAQ,CAAC;EACvE;EAEA,OAAOC,QAAQ;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,eAAe,GAAGA,CAC7BC,SAAwB,EACxBC,MAAgB,EAChBV,QAAc,KACX;EACH,MAAMW,YAAY,GAAGb,SAAS,CAACY,MAAM,CAACD,SAAS,CAAC,EAAET,QAAQ,CAAC;EAC3D,IAAIW,YAAY,EAAE;IAChB,OAAOA,YAAY;EACrB;;EAEA;EACA;EACA,OAAOtB,cAAc,CAACqB,MAAM,CAACE,IAAI,IAAIzB,SAAS,CAACK,MAAM,CAAC;AACxD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA"}