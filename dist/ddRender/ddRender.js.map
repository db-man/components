{"version":3,"file":"ddRender.js","names":["constants","ddRenderFnMapping","defaultRendersForListPage","NUMBER","val","STRING","STRING_ARRAY","join","BOOL","undefined","String","defaultRendersForGetPage","getRender","args","tplExtra","renderFn","fn","Array","isArray","renderFnName","record","index","getColumnRender","renderKey","column","TYPE_LIST_PAGE","TYPE_GET_PAGE","indexOf","console","error","customRender","type"],"sources":["../../src/ddRender/ddRender.ts"],"sourcesContent":["import * as constants from '../constants';\nimport DbColumn, { RenderKeyType } from '../types/DbColumn';\nimport { RowType } from '../types/Data';\nimport { RenderArgs } from '../types/UiType';\nimport ddRenderFnMapping from './ddRenderFnMapping';\n\n// Default render func when \"type:listPage\" or \"type:getPage\" not defined in db table column\nconst defaultRendersForListPage = {\n  [constants.NUMBER]: (val: number) => val,\n  [constants.STRING]: (val: string) => val,\n  [constants.STRING_ARRAY]: (val: string[]) => val && val.join(', '),\n  [constants.BOOL]: (val: boolean) => (val === undefined ? '' : String(val)),\n};\nconst defaultRendersForGetPage = {\n  [constants.NUMBER]: (val: number) =>\n    val === undefined ? 'NO_VALUE' : String(val),\n  [constants.STRING]: (val: string) => (val === undefined ? 'NO_VALUE' : val),\n  [constants.STRING_ARRAY]: (val: string[]) =>\n    val === undefined ? 'NO_VALUE' : val && val.join(', '),\n  [constants.BOOL]: (val: boolean) =>\n    val === undefined ? 'NO_VALUE' : String(val),\n};\n\n/**\n * @param {string|string[]} args e.g. \"Link\" or [\"Link\", \"{{record.url}}\"]\n * @param {Object} tplExtra\n */\nexport const getRender = (args: RenderArgs, tplExtra?: any) => {\n  // the column render function defined in Table component of antd\n  // renderFn = (val, record, index) => ()\n  let renderFn;\n\n  if (!args) {\n    return renderFn;\n  }\n\n  if (typeof args === 'string') {\n    const fn = ddRenderFnMapping[args];\n    if (fn) {\n      renderFn = fn;\n    }\n  }\n\n  if (Array.isArray(args)) {\n    const [renderFnName] = args;\n    renderFn = (val: any, record: RowType, index?: number) =>\n      ddRenderFnMapping[renderFnName](val, record, index, args, tplExtra);\n  }\n\n  return renderFn;\n};\n\n/**\n * column def:\n * {\n *   \"type:listPage\": [\"Link\", \"{{record.url}}\"]\n * }\n */\nexport const getColumnRender = (\n  renderKey: RenderKeyType,\n  column: DbColumn,\n  tplExtra?: any\n) => {\n  // should only used for \"type:listPage\" or \"type:getPage\"\n  if (\n    !renderKey ||\n    [constants.TYPE_LIST_PAGE, constants.TYPE_GET_PAGE].indexOf(renderKey) < 0\n  ) {\n    console.error('getColumnRender: invalid renderKey', renderKey);\n  }\n\n  const customRender = getRender(column[renderKey], tplExtra);\n  if (customRender) {\n    return customRender;\n  }\n\n  if (renderKey === constants.TYPE_GET_PAGE) {\n    return defaultRendersForGetPage[column.type || constants.STRING];\n  }\n\n  // the column render function defined in Table component of antd\n  // renderFn = (val, record, index) => ()\n  return defaultRendersForListPage[column.type || constants.STRING];\n};\n\n// export const getRenderResultByColumn = (\n//   value: any,\n//   record: RowType,\n//   index: number,\n//   args: RenderArgs,\n//   column: Column\n// ) => getColumnRender(constants.TYPE_LIST_PAGE, column)(value, record, index);\n"],"mappings":"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"}