{"version":3,"file":"dbs.js","names":["LS_KEY_DBS_SCHEMA","getTablesByDbName","dbName","keyVal","localStorage","getItem","dbs2","JSON","parse","setDbs","val","setItem"],"sources":["../src/dbs.ts"],"sourcesContent":["import { LS_KEY_DBS_SCHEMA } from './constants';\n// import DbTable from './types/DbTable';\n\n/**\n * DEPRECATED\n *\n * ```json\n * {\n *   \"iam\": [\n *     {\"name\": \"users\", \"large\": true},\n *     {\"name\": \"roles\"}\n *   ]\n * }\n * ```\n */\n// export const dbs = JSON.parse(localStorage.getItem(LS_KEY_DBS_SCHEMA) || `{}`);\n\nexport const getTablesByDbName = (dbName = '') => {\n  const keyVal = localStorage.getItem(LS_KEY_DBS_SCHEMA);\n  if (!keyVal) return [];\n  const dbs2 = JSON.parse(localStorage.getItem(LS_KEY_DBS_SCHEMA) || `{}`);\n  return dbs2[dbName] || [];\n};\n\nexport const setDbs = (val: string) =>\n  localStorage.setItem(LS_KEY_DBS_SCHEMA, val);\n\n// TODO Maybe in @db-man/github\n// export const getTable = (dbName: string, tableName: string) => {\n//   if (!dbs) return null;\n//   return dbs[dbName].find(({ name }: DbTable) => name === tableName);\n// };\n\n// TODO Maybe in @db-man/github\n// export const isLargeTable = (dbName: string, tableName: string) => {\n//   const table = getTable(dbName, tableName);\n//   if (!table) return false;\n//   return table.large;\n// };\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,aAAa;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,iBAAiB,GAAGA,CAACC,MAAM,GAAG,EAAE,KAAK;EAChD,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAACL,iBAAiB,CAAC;EACtD,IAAI,CAACG,MAAM,EAAE,OAAO,EAAE;EACtB,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAACL,iBAAiB,CAAC,IAAK,IAAG,CAAC;EACxE,OAAOM,IAAI,CAACJ,MAAM,CAAC,IAAI,EAAE;AAC3B,CAAC;AAED,OAAO,MAAMO,MAAM,GAAIC,GAAW,IAChCN,YAAY,CAACO,OAAO,CAACX,iBAAiB,EAAEU,GAAG,CAAC;;AAE9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA"}