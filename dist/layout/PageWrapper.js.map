{"version":3,"file":"PageWrapper.js","names":["React","Link","message","Spin","GithubDb","getDbs","getTablesByDbName","constants","getPrimaryKey","PageContext","NavBar","CreatePage","UpdatePage","ListPage","RandomPage","TagsCloudPage","GetPage","TableConfigPage","QueryPage","Provider","mapp","list","random","create","update","get","tagsCloud","tableConfig","query","TableList","dbName","tablesOfSelectedDb","createElement","map","name","tName","key","to","ActionList","tableName","action","PageWrapper","Component","constructor","props","_defineProperty","setState","loading","tables","githubDb","getDbTablesSchemaAsync","console","debug","error","localStorage","getItem","LS_KEY_DBS_SCHEMA","errMsg","JSON","parse","state","personalAccessToken","LS_KEY_GITHUB_PERSONAL_ACCESS_TOKEN","repoPath","LS_KEY_GITHUB_REPO_PATH","owner","LS_KEY_GITHUB_OWNER","repoName","LS_KEY_GITHUB_REPO_NAME","dbsSchema","componentDidMount","onlineEnabled","getOnlineData","getOfflineData","pageInfo","document","title","columns","currentTable","find","table","appModes","LS_KEY_GITHUB_REPO_MODES","split","dbs","primaryKey","render","errMsgs","push","length","className","join","PageComponent","tip","value"],"sources":["../../src/layout/PageWrapper.tsx"],"sourcesContent":["// @ts-nocheck\n\n/* eslint-disable react/prop-types, react/destructuring-assignment, max-len, no-console, react/no-unused-class-component-methods */\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { message, Spin } from 'antd';\nimport { GithubDb } from '@db-man/github';\n\nimport { getDbs, getTablesByDbName } from '../dbs';\nimport * as constants from '../constants';\nimport { getPrimaryKey } from '../utils';\nimport PageContext from '../contexts/page';\nimport NavBar from '../components/NavBar';\nimport CreatePage from '../components/CreatePage';\nimport UpdatePage from '../components/UpdatePage';\nimport ListPage from '../components/ListPage';\nimport RandomPage from '../components/RandomPage';\nimport TagsCloudPage from '../components/TagsCloudPage';\nimport GetPage from '../components/GetPage';\nimport TableConfigPage from '../components/TableConfigPage';\nimport QueryPage from '../components/QueryPage';\n\nconst { Provider } = PageContext;\n\nconst mapp = {\n  list: ListPage,\n  random: RandomPage,\n  create: CreatePage,\n  update: UpdatePage,\n  get: GetPage,\n  tagsCloud: TagsCloudPage,\n  tableConfig: TableConfigPage,\n  query: QueryPage,\n};\n\nexport function TableList({ dbName }) {\n  if (!getDbs()) return null;\n  const tablesOfSelectedDb = getDbs()[dbName];\n  return (\n    <div>\n      {tablesOfSelectedDb.map(({ name: tName }) => (\n        <li key={tName}>\n          <Link to={`/${dbName}/${tName}`}>{tName}</Link>\n        </li>\n      ))}\n    </div>\n  );\n}\n\nexport function ActionList({ dbName, tableName }) {\n  return (\n    <div>\n      List of actions in table:\n      {['list', 'create'].map((action) => (\n        <li key={action}>\n          <Link to={`/${dbName}/${tableName}/${action}`}>{action}</Link>\n        </li>\n      ))}\n    </div>\n  );\n}\n\n/**\n * To render list/create/update page for `/db_name/table_name.json`\n */\nexport default class PageWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // tables is got from db repo db_name/columns.json which contain all tables column definition in current database\n      tables: [],\n      loading: false,\n    };\n\n    this.githubDb = new GithubDb({\n      personalAccessToken: localStorage.getItem(constants.LS_KEY_GITHUB_PERSONAL_ACCESS_TOKEN),\n      repoPath: localStorage.getItem(constants.LS_KEY_GITHUB_REPO_PATH),\n      owner: localStorage.getItem(constants.LS_KEY_GITHUB_OWNER),\n      repoName: localStorage.getItem(constants.LS_KEY_GITHUB_REPO_NAME),\n      dbsSchema: localStorage.getItem(constants.LS_KEY_DBS_SCHEMA),\n    });\n  }\n\n  componentDidMount() {\n    // TODO we could get online and offline at the same time\n    // then we only use offline data to render\n    // then we compare the offline data with online data, if there is any diff, we show alert\n    const onlineEnabled = false;\n    if (onlineEnabled) {\n      this.getOnlineData();\n    } else {\n      this.getOfflineData();\n    }\n\n    const { action, tableName } = this.pageInfo;\n    document.title = `${action} ${tableName}`;\n  }\n\n  get columns() {\n    const { dbName, tableName } = this.props;\n    const tablesOfSelectedDb = getTablesByDbName(dbName);\n    if (!tablesOfSelectedDb) return [];\n    const currentTable = tablesOfSelectedDb.find(\n      (table) => table.name === tableName,\n    );\n    if (!currentTable) return [];\n    return currentTable.columns;\n  }\n\n  get pageInfo() {\n    const { dbName, tableName, action } = this.props;\n    return {\n      // e.g. ['split-table']\n      appModes: localStorage.getItem(constants.LS_KEY_GITHUB_REPO_MODES)\n        ? localStorage.getItem(constants.LS_KEY_GITHUB_REPO_MODES).split(',')\n        : [],\n      dbs: getDbs(),\n      dbName,\n      tableName,\n      action,\n      columns: this.columns,\n      primaryKey: getPrimaryKey(this.columns),\n      tables: getTablesByDbName(dbName),\n      githubDb: this.githubDb,\n    };\n  }\n\n  getOnlineData = async () => {\n    try {\n      this.setState({ loading: true });\n      const tables = await this.githubDb.getDbTablesSchemaAsync(this.props.dbName);\n      console.debug('use online columns', tables);\n      this.setState({\n        tables,\n      });\n    } catch (error) {\n      console.error(\n        'Failed to get column JSON file in List component, error:',\n        error,\n      );\n      message.error('Failed to get online columns definition!');\n    }\n    this.setState({ loading: false });\n  };\n\n  getOfflineData = () => {\n    if (!localStorage.getItem(constants.LS_KEY_DBS_SCHEMA)) {\n      this.setState({ errMsg: 'No DBS schema defined in localStorage!' });\n      return;\n    }\n    const tables = JSON.parse(\n      localStorage.getItem(constants.LS_KEY_DBS_SCHEMA),\n    )[this.props.dbName];\n    this.setState({\n      tables,\n    });\n  };\n\n  renderTableListInDb = () => (\n    <div>\n      List of tables in DB:\n      <TableList dbName={this.props.dbName} />\n    </div>\n  );\n\n  renderActionInTable = () => (\n    <ActionList dbName={this.props.dbName} tableName={this.props.tableName} />\n  );\n\n  render() {\n    const { dbName, tableName, action } = this.props;\n    const { loading, tables, errMsg } = this.state;\n\n    // if (!tableName) {\n    //   return this.renderTableListInDb();\n    // }\n\n    // if (!action) {\n    //   return this.renderActionInTable();\n    // }\n\n    const errMsgs = [];\n    if (errMsg) {\n      errMsgs.push(errMsg);\n    }\n    if (!dbName) {\n      errMsgs.push('dbName is undefined!');\n    }\n    if (getPrimaryKey(this.columns) === null) {\n      errMsgs.push('Primary key not found on table!');\n    }\n    if (this.columns.length === 0) {\n      errMsgs.push('No columns found for this table!');\n    }\n\n    if (errMsgs.length > 0) {\n      return <div className=\"dm-page-v2 err-msg\">{errMsgs.join(' ,')}</div>;\n    }\n\n    const PageComponent = mapp[action];\n\n    if (!PageComponent) {\n      return (\n        <div>\n          <div>404 - PageComponent Not Found</div>\n          <div>{`/${dbName}/${tableName}/${action}`}</div>\n        </div>\n      );\n    }\n\n    if (loading) {\n      return <Spin tip=\"loading columns in PageWrapper\">Loading...</Spin>;\n    }\n\n    return (\n      <Provider value={this.pageInfo}>\n        <div className=\"dm-page-v2\">\n          {/* Pass tableName down, so child component to rerender according to this props */}\n          <PageComponent\n            dbName={dbName}\n            tableName={tableName}\n            action={action}\n            tables={tables}\n          />\n          <NavBar />\n        </div>\n      </Provider>\n    );\n  }\n}\n"],"mappings":"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"}