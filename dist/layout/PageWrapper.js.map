{"version":3,"file":"PageWrapper.js","names":["React","useEffect","useRef","useState","Link","message","Spin","GithubDb","getTablesByDbName","constants","getPrimaryKey","PageContext","NavBar","CreatePage","UpdatePage","ListPage","RandomPage","TagsCloudPage","GetPage","TableConfigPage","QueryPage","useAppContext","Provider","mapp","list","random","create","update","get","tagsCloud","tableConfig","query","TableList","dbName","dbs","tablesOfSelectedDb","createElement","map","name","tName","key","to","ActionList","tableName","action","PageWrapper","props","tables","setTables","loading","setLoading","errMsg","setErrMsg","githubDbRef","personalAccessToken","localStorage","getItem","LS_KEY_GITHUB_PERSONAL_ACCESS_TOKEN","repoPath","LS_KEY_GITHUB_REPO_PATH","owner","LS_KEY_GITHUB_OWNER","repoName","LS_KEY_GITHUB_REPO_NAME","dbsSchema","LS_KEY_DBS_SCHEMA","onlineEnabled","getOnlineData","getOfflineData","pageInfo","document","title","columns","currentTable","find","table","appModes","LS_KEY_GITHUB_REPO_MODES","split","primaryKey","githubDb","current","_tables","getDbTablesSchemaAsync","console","debug","error","JSON","parse","renderTableListInDb","renderActionInTable","errMsgs","push","length","className","join","PageComponent","tip","value"],"sources":["../../src/layout/PageWrapper.tsx"],"sourcesContent":["/* eslint-disable react/prop-types, react/destructuring-assignment, max-len, no-console, react/no-unused-class-component-methods */\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { message, Spin } from 'antd';\nimport { GithubDb } from '@db-man/github';\n\nimport { getTablesByDbName } from '../dbs';\nimport * as constants from '../constants';\nimport { getPrimaryKey } from '../utils';\nimport PageContext from '../contexts/page';\nimport NavBar from '../components/NavBar';\nimport CreatePage from '../components/CreatePage';\nimport UpdatePage from '../components/UpdatePage';\nimport ListPage from '../components/ListPage';\nimport RandomPage from '../components/RandomPage';\nimport TagsCloudPage from '../components/TagsCloudPage';\nimport GetPage from '../components/GetPage';\nimport TableConfigPage from '../components/TableConfigPage';\nimport QueryPage from '../components/QueryPage';\nimport { useAppContext } from '../contexts/AppContext';\nimport DbTable from '../types/DbTable';\n\nconst { Provider } = PageContext;\n\nconst mapp: {\n  [key: string]: React.ComponentType<{\n    dbName: string;\n    tableName: string;\n    action: string;\n    tables: DbTable[];\n  }>;\n} = {\n  list: ListPage,\n  random: RandomPage,\n  create: CreatePage,\n  update: UpdatePage,\n  get: GetPage,\n  tagsCloud: TagsCloudPage,\n  tableConfig: TableConfigPage,\n  query: QueryPage,\n};\n\nexport function TableList({ dbName }: { dbName: string }) {\n  const { dbs } = useAppContext();\n  if (!dbs) return null;\n  const tablesOfSelectedDb = dbs[dbName];\n  return (\n    <div>\n      {tablesOfSelectedDb.map(({ name: tName }) => (\n        <li key={tName}>\n          <Link to={`/${dbName}/${tName}`}>{tName}</Link>\n        </li>\n      ))}\n    </div>\n  );\n}\n\nexport function ActionList({\n  dbName,\n  tableName,\n}: {\n  dbName: string;\n  tableName: string;\n}) {\n  return (\n    <div>\n      List of actions in table:\n      {['list', 'create'].map((action) => (\n        <li key={action}>\n          <Link to={`/${dbName}/${tableName}/${action}`}>{action}</Link>\n        </li>\n      ))}\n    </div>\n  );\n}\n\n/**\n * To render list/create/update page for `/db_name/table_name.json`\n */\nconst PageWrapper = (props: {\n  dbName?: string;\n  tableName?: string;\n  action?: string;\n}) => {\n  // tables is got from db repo db_name/columns.json which contain all tables column definition in current database\n  const [tables, setTables] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [errMsg, setErrMsg] = useState('');\n  const githubDbRef = useRef(\n    new GithubDb({\n      personalAccessToken:\n        localStorage.getItem(constants.LS_KEY_GITHUB_PERSONAL_ACCESS_TOKEN) ||\n        '',\n      repoPath: localStorage.getItem(constants.LS_KEY_GITHUB_REPO_PATH) || '',\n      owner: localStorage.getItem(constants.LS_KEY_GITHUB_OWNER) || '',\n      repoName: localStorage.getItem(constants.LS_KEY_GITHUB_REPO_NAME) || '',\n      dbsSchema: localStorage.getItem(constants.LS_KEY_DBS_SCHEMA) || '',\n    })\n  );\n\n  useEffect(() => {\n    // TODO we could get online and offline at the same time\n    // then we only use offline data to render\n    // then we compare the offline data with online data, if there is any diff, we show alert\n    const onlineEnabled = false;\n    if (onlineEnabled) {\n      getOnlineData();\n    } else {\n      getOfflineData();\n    }\n\n    const { action, tableName } = pageInfo();\n    document.title = `${action} ${tableName}`;\n  }, []);\n\n  const columns = () => {\n    const { dbName, tableName } = props;\n    const tablesOfSelectedDb = getTablesByDbName(dbName);\n    if (!tablesOfSelectedDb) return [];\n    const currentTable = tablesOfSelectedDb.find(\n      (table: DbTable) => table.name === tableName\n    );\n    if (!currentTable) return [];\n    return currentTable.columns;\n  };\n\n  const pageInfo = () => {\n    const { dbName, tableName, action } = props;\n    return {\n      // e.g. ['split-table']\n      appModes: localStorage.getItem(constants.LS_KEY_GITHUB_REPO_MODES)\n        ? localStorage.getItem(constants.LS_KEY_GITHUB_REPO_MODES)!.split(',')\n        : [],\n      dbName: dbName || '',\n      tableName: tableName || '',\n      action: action || '',\n      columns: columns(),\n      primaryKey: getPrimaryKey(columns()),\n      tables: getTablesByDbName(dbName),\n      githubDb: githubDbRef.current,\n    };\n  };\n\n  const getOnlineData = async () => {\n    try {\n      setLoading(true);\n      const _tables = await githubDbRef.current.getDbTablesSchemaAsync(\n        props.dbName\n      );\n      console.debug('use online columns', _tables);\n      setTables(_tables);\n    } catch (error) {\n      console.error(\n        'Failed to get column JSON file in List component, error:',\n        error\n      );\n      message.error('Failed to get online columns definition!');\n    }\n    setLoading(false);\n  };\n\n  const getOfflineData = () => {\n    if (!localStorage.getItem(constants.LS_KEY_DBS_SCHEMA)) {\n      setErrMsg('No DBS schema defined in localStorage!');\n      return;\n    }\n    const _tables = JSON.parse(\n      localStorage.getItem(constants.LS_KEY_DBS_SCHEMA) || '{}'\n    )[props.dbName || ''];\n    setTables(_tables);\n  };\n\n  const renderTableListInDb = () => (\n    <div>\n      List of tables in DB:\n      <TableList dbName={props.dbName || ''} />\n    </div>\n  );\n\n  const renderActionInTable = () => (\n    <ActionList dbName={props.dbName || ''} tableName={props.tableName || ''} />\n  );\n\n  const { dbName, tableName, action } = props;\n\n  // if (!tableName) {\n  //   return this.renderTableListInDb();\n  // }\n\n  // if (!action) {\n  //   return this.renderActionInTable();\n  // }\n\n  const errMsgs = [];\n  if (errMsg) {\n    errMsgs.push(errMsg);\n  }\n  if (!dbName) {\n    errMsgs.push('dbName is undefined!');\n  }\n  if (getPrimaryKey(columns()) === null) {\n    errMsgs.push('Primary key not found on table!');\n  }\n  if (columns().length === 0) {\n    errMsgs.push('No columns found for this table!');\n  }\n\n  if (errMsgs.length > 0) {\n    return <div className='dm-page-v2 err-msg'>{errMsgs.join(' ,')}</div>;\n  }\n\n  const PageComponent = mapp[action || ''];\n\n  if (!PageComponent) {\n    return (\n      <div>\n        <div>404 - PageComponent Not Found</div>\n        <div>{`/${dbName}/${tableName}/${action}`}</div>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return <Spin tip='loading columns in PageWrapper'>Loading...</Spin>;\n  }\n\n  return (\n    <Provider value={pageInfo()}>\n      <div className='dm-page-v2'>\n        {/* Pass tableName down, so child component to rerender according to this props */}\n        <PageComponent\n          dbName={dbName || ''}\n          tableName={tableName || ''}\n          action={action || ''}\n          tables={tables}\n        />\n        <NavBar />\n      </div>\n    </Provider>\n  );\n};\n\nexport default PageWrapper;\n"],"mappings":"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"}