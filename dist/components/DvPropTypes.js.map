{"version":3,"file":"DvPropTypes.js","names":["PropTypes","ddType","arrayOf","propValue","key","componentName","location","propFullName","Error","uiType","oneOfType","string","column","shape","name","type","columns","DvPropTypes"],"sources":["../../src/components/DvPropTypes.ts"],"sourcesContent":["// @ts-nocheck\n\nimport PropTypes from 'prop-types';\n\n// Data driven type\n// e.g. \"Link\"\n// e.g. [\"Link\", \"https://github.com/{{record.user}}/{{record.repo}}\"]\n//\n// You can also supply a custom validator to `arrayOf` and `objectOf`.\n// It should return an Error object if the validation fails. The validator\n// will be called for each key in the array or object. The first two\n// arguments of the validator are the array or object itself, and the\n// current item's key.\nconst ddType = PropTypes.arrayOf((\n  propValue, // the whole array, e.g. [\"Link\", \"{\\\"href\\\":\\\"https://github.com/{{record.user}}/{{record.repo}}\\\",\\\"text\\\":\\\"{{record.user}}/{{record.repo}}\\\"}\"}]\n  key, // index of the element needed to check in this array, e.g. 0\n  componentName, // e.g. \"ListPage\"\n  location, // e.g. \"prop\"\n  propFullName, // e.g. \"columns[0].type:listPage[0]\"\n) => { // eslint-disable-line consistent-return\n  switch (key) {\n    // Check component name which used to render this value\n    case 0: {\n      if (typeof propValue[0] !== 'string') {\n        return new Error(\n          `Invalid prop \\`${\n            propFullName\n          }\\` supplied to`\n            + ` \\`${\n              componentName\n            }\\`. Validation failed. First element should be a string.`,\n        );\n      }\n      break;\n    }\n    // Second element in array should be\n    case 1: {\n      if (\n        typeof propValue[1] !== 'string'\n        && typeof propValue[1] !== 'object'\n      ) {\n        return new Error(\n          `Invalid prop \\`${\n            propFullName\n          }\\` supplied to`\n            + ` \\`${\n              componentName\n            }\\`. Validation failed. Second element should be a string or object.`,\n        );\n      }\n      break;\n    }\n    default:\n  }\n});\n\nconst uiType = PropTypes.oneOfType([\n  PropTypes.string, // e.g. \"Link\"\n  ddType, // e.g. [\"Link\", \"https://github.com/{{record.user}}/{{record.repo}}\"]\n]);\n\nconst column = PropTypes.shape({\n  name: PropTypes.string,\n  type: PropTypes.string,\n  'type:createUpdatePage': uiType,\n  'type:getPage': uiType,\n  'type:listPage': uiType,\n});\n\nconst columns = PropTypes.arrayOf(column);\n\nconst DvPropTypes = {\n  column,\n  columns,\n};\n\nexport default DvPropTypes;\n"],"mappings":"AAAA;;AAEA,OAAOA,SAAS,MAAM,YAAY;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAGD,SAAS,CAACE,OAAO,CAAC,CAC/BC,SAAS;AAAE;AACXC,GAAG;AAAE;AACLC,aAAa;AAAE;AACfC,QAAQ;AAAE;AACVC,YAAY,CAAE;AAAA,KACX;EAAE;EACL,QAAQH,GAAG;IACT;IACA,KAAK,CAAC;MAAE;QACN,IAAI,OAAOD,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;UACpC,OAAO,IAAIK,KAAK,CACb,kBACCD,YACD,gBAAe,GACX,MACDF,aACD,0DACL,CAAC;QACH;QACA;MACF;IACA;IACA,KAAK,CAAC;MAAE;QACN,IACE,OAAOF,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,IAC7B,OAAOA,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EACnC;UACA,OAAO,IAAIK,KAAK,CACb,kBACCD,YACD,gBAAe,GACX,MACDF,aACD,qEACL,CAAC;QACH;QACA;MACF;IACA;EACF;AACF,CAAC,CAAC;AAEF,MAAMI,MAAM,GAAGT,SAAS,CAACU,SAAS,CAAC,CACjCV,SAAS,CAACW,MAAM;AAAE;AAClBV,MAAM,CAAE;AAAA,CACT,CAAC;;AAEF,MAAMW,MAAM,GAAGZ,SAAS,CAACa,KAAK,CAAC;EAC7BC,IAAI,EAAEd,SAAS,CAACW,MAAM;EACtBI,IAAI,EAAEf,SAAS,CAACW,MAAM;EACtB,uBAAuB,EAAEF,MAAM;EAC/B,cAAc,EAAEA,MAAM;EACtB,eAAe,EAAEA;AACnB,CAAC,CAAC;AAEF,MAAMO,OAAO,GAAGhB,SAAS,CAACE,OAAO,CAACU,MAAM,CAAC;AAEzC,MAAMK,WAAW,GAAG;EAClBL,MAAM;EACNI;AACF,CAAC;AAED,eAAeC,WAAW"}