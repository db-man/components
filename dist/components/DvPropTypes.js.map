{"version":3,"file":"DvPropTypes.js","names":["PropTypes","TYPE_GET_PAGE","TYPE_LIST_PAGE","ddType","arrayOf","propValue","key","componentName","location","propFullName","Error","uiType","oneOfType","string","column","shape","name","type","columns","DvPropTypes"],"sources":["../../src/components/DvPropTypes.ts"],"sourcesContent":["// @ts-nocheck\n\nimport PropTypes from 'prop-types';\nimport { TYPE_GET_PAGE, TYPE_LIST_PAGE } from '../constants';\n\n// Data driven type\n// e.g. \"Link\"\n// e.g. [\"Link\", \"https://github.com/{{record.user}}/{{record.repo}}\"]\n//\n// You can also supply a custom validator to `arrayOf` and `objectOf`.\n// It should return an Error object if the validation fails. The validator\n// will be called for each key in the array or object. The first two\n// arguments of the validator are the array or object itself, and the\n// current item's key.\nconst ddType = PropTypes.arrayOf(\n  (\n    propValue: any[], // the whole array, e.g. [\"Link\", \"{\\\"href\\\":\\\"https://github.com/{{record.user}}/{{record.repo}}\\\",\\\"text\\\":\\\"{{record.user}}/{{record.repo}}\\\"}\"}]\n    key: number, // index of the element needed to check in this array, e.g. 0\n    componentName: string, // e.g. \"ListPage\"\n    location: string, // e.g. \"prop\"\n    propFullName: string // e.g. \"columns[0].type:listPage[0]\"\n  ) => {\n    // eslint-disable-line consistent-return\n    switch (key) {\n      // Check component name which used to render this value\n      case 0: {\n        if (typeof propValue[0] !== 'string') {\n          return new Error(\n            `Invalid prop \\`${propFullName}\\` supplied to` +\n              ` \\`${componentName}\\`. Validation failed. First element should be a string.`\n          );\n        }\n        break;\n      }\n      // Second element in array should be\n      case 1: {\n        if (\n          typeof propValue[1] !== 'string' &&\n          typeof propValue[1] !== 'object'\n        ) {\n          return new Error(\n            `Invalid prop \\`${propFullName}\\` supplied to` +\n              ` \\`${componentName}\\`. Validation failed. Second element should be a string or object.`\n          );\n        }\n        break;\n      }\n      default:\n    }\n  }\n);\n\n// See also: UiType in src/types/Column.ts\nconst uiType = PropTypes.oneOfType([\n  PropTypes.string, // e.g. \"Link\"\n  ddType, // e.g. [\"Link\", \"https://github.com/{{record.user}}/{{record.repo}}\"]\n]);\n\nconst column = PropTypes.shape({\n  name: PropTypes.string,\n  type: PropTypes.string,\n  'type:createUpdatePage': uiType,\n  [TYPE_GET_PAGE]: uiType,\n  [TYPE_LIST_PAGE]: uiType,\n});\n\nconst columns = PropTypes.arrayOf(column);\n\nconst DvPropTypes = {\n  column,\n  columns,\n};\n\nexport default DvPropTypes;\n"],"mappings":"AAAA;;AAEA,OAAOA,SAAS,MAAM,YAAY;AAClC,SAASC,aAAa,EAAEC,cAAc,QAAQ,cAAc;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAGH,SAAS,CAACI,OAAO,CAC9B,CACEC,SAAgB,EAChBC,GAAW,EACXC,aAAqB,EACrBC,QAAgB,EAChBC,YAAoB,KACjB;EACH;EACA,QAAQH,GAAG;IACT;IACA,KAAK,CAAC;MAAE;QACN,IAAI,OAAOD,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;UACpC,OAAO,IAAIK,KAAK,CACb,kBAAiBD,YAAa,gBAAe,GAC3C,MAAKF,aAAc,0DACxB,CAAC;QACH;QACA;MACF;IACA;IACA,KAAK,CAAC;MAAE;QACN,IACE,OAAOF,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,IAChC,OAAOA,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAChC;UACA,OAAO,IAAIK,KAAK,CACb,kBAAiBD,YAAa,gBAAe,GAC3C,MAAKF,aAAc,qEACxB,CAAC;QACH;QACA;MACF;IACA;EACF;AACF,CACF,CAAC;;AAED;AACA,MAAMI,MAAM,GAAGX,SAAS,CAACY,SAAS,CAAC,CACjCZ,SAAS,CAACa,MAAM;AAAE;AAClBV,MAAM,CAAE;AAAA,CACT,CAAC;;AAEF,MAAMW,MAAM,GAAGd,SAAS,CAACe,KAAK,CAAC;EAC7BC,IAAI,EAAEhB,SAAS,CAACa,MAAM;EACtBI,IAAI,EAAEjB,SAAS,CAACa,MAAM;EACtB,uBAAuB,EAAEF,MAAM;EAC/B,CAACV,aAAa,GAAGU,MAAM;EACvB,CAACT,cAAc,GAAGS;AACpB,CAAC,CAAC;AAEF,MAAMO,OAAO,GAAGlB,SAAS,CAACI,OAAO,CAACU,MAAM,CAAC;AAEzC,MAAMK,WAAW,GAAG;EAClBL,MAAM;EACNI;AACF,CAAC;AAED,eAAeC,WAAW"}