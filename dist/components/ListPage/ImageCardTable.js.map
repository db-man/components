{"version":3,"file":"ImageCardTable.js","names":["React","Alert","Card","Empty","Pagination","ImageLink","gridStyle","width","textAlign","ImageCardTable","imgKey","dataSource","pagination","onChange","createElement","message","description","type","showIcon","className","slice","current","pageSize","map","item","index","el","imgSrc","url","length","Fragment","key","Grid","style","total","pageSizeOptions"],"sources":["../../../src/components/ListPage/ImageCardTable.tsx"],"sourcesContent":["import React from 'react';\n\nimport { Alert, Card, Empty, Pagination } from 'antd';\nimport { ImageLink } from '../Links';\n\nconst gridStyle: React.CSSProperties = {\n  width: '25%',\n  textAlign: 'center',\n};\n\nexport type CardTablePagination = {\n  pageSize: number;\n  current: number;\n};\n\nconst ImageCardTable = ({\n  imgKey,\n  dataSource,\n  pagination,\n  onChange,\n}: {\n  imgKey?: string;\n  dataSource: any[];\n  pagination: CardTablePagination;\n  onChange: (pagination: CardTablePagination) => void;\n}) => {\n  if (!imgKey) {\n    return (\n      <Alert\n        message='Error'\n        description={\n          <div>\n            Which column data to render the image list? Please define only one\n            column with <code>isListPageImageViewKey: true</code>\n          </div>\n        }\n        type='error'\n        showIcon\n      />\n    );\n  }\n\n  return (\n    <div className='dm-card-table'>\n      <Card>\n        {dataSource\n          .slice(\n            (pagination.current - 1) * pagination.pageSize,\n            pagination.current * pagination.pageSize\n          )\n          .map((item, index) => {\n            let el = null;\n            switch (typeof item[imgKey]) {\n              case 'undefined':\n                el = <Empty />;\n                break;\n              case 'string':\n                el = <ImageLink imgSrc={item[imgKey]} url={item[imgKey]} />;\n                break;\n              case 'object':\n                if (item[imgKey]?.length === 0)\n                  return (\n                    <Alert\n                      message='Error'\n                      description='Empty image list'\n                      type='error'\n                      showIcon\n                    />\n                  );\n                el = (\n                  <>\n                    {item[imgKey].map((url: string) => (\n                      <ImageLink key={url} imgSrc={url} url={url} />\n                    ))}\n                  </>\n                );\n                break;\n              default:\n                return (\n                  <Alert\n                    message='Error'\n                    description={`The value of ${imgKey} is not a string or an array, but a ${typeof item[\n                      imgKey\n                    ]} type, cannot render image list!`}\n                    type='error'\n                    showIcon\n                  />\n                );\n            }\n\n            return (\n              <Card.Grid key={index} style={gridStyle}>\n                {el}\n              </Card.Grid>\n            );\n          })}\n      </Card>\n      <Pagination\n        current={pagination.current}\n        pageSize={pagination.pageSize}\n        total={dataSource.length}\n        pageSizeOptions={[4 * 3, 4 * 6, 4 * 10, 4 * 20]}\n        onChange={(current, pageSize) => {\n          onChange({ current, pageSize });\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ImageCardTable;\n"],"mappings":"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"}