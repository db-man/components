{"version":3,"file":"helpers.js","names":["constants","searchKeywordInText","keyword","text","toLowerCase","indexOf","searchStringInArray","tags","match","forEach","subCellValue","searchKeywordInTags","reduce","prev","tag","searchKeywordsInTagsWithLogicAnd","keywords","kw","searchKeywordsInTagsWithLogicOr","stringArrayFilter","filterKeyword","cellValue","split","isAllFilterInvalid","filter","filterColumnIds","validFilter","colId","length","filterFnMapping","STRING","STRING_ARRAY","defaultValueMapping","searchByFilter","filterColumns","filterKeyVals","row","column","id","matched","type","getFilteredData","originalRows","map","getSortedData","originalData","sorter","sort","a","b","result","columnKey","localeCompare","order","findDuplicates","arr","sortedArr","slice","results","i","push","getInitialFilter","filterProp","f","url","URL","window","location","filterParam","searchParams","get","startsWith","JSON","parse","error","console","getInitialSorter","sorterParam","updateUrl","states","Object","keys","stateKey","set","stringify","history","pushState","getColumnSortOrder","columnId","undefined"],"sources":["../../../src/components/ListPage/helpers.ts"],"sourcesContent":["// @ts-nocheck\n\n/* eslint-disable max-len */\n\nimport * as constants from '../../constants';\n\n/**\n * Search \"oo\"(keyword) in \"foobar200\"(text)\n * @param {string} keyword\n * @param {string} text\n */\nexport const searchKeywordInText = (keyword, text) => text.toLowerCase().indexOf(keyword.toLowerCase()) !== -1;\n\n/**\n * Search keyword 'do' in string array ['dog', 'cat']\n * @param {string|undefined} keyword Search keyword\n * @param {string[]} tags The table cell value\n * @return {boolean}\n */\nexport const searchStringInArray = (keyword, tags) => {\n  let match = false;\n  tags.forEach((subCellValue) => {\n    if (searchKeywordInText(keyword, subCellValue)) {\n      match = true;\n    }\n  });\n  return match;\n};\n\n/**\n * Search keyword in string array, e.g. find \"ap\" in [\"apple\",\"banana\"]\n * @param {string|undefined} keyword Search keyword\n * @param {string[]} tags The table cell value\n * @return {boolean}\n */\nexport const searchKeywordInTags = (keyword, tags) => tags.reduce((prev, tag) => prev || searchKeywordInText(keyword, tag), false);\n\n// keywords=\"ap+ba\" tags=[\"apple\",\"banana\"]\n// take 1st kw \"ap\": \"apple\".indexOf(\"ap\")=>0, \"banana\".indexOf(\"ap\")=>-1, data has tags matched \"ap\", => true\n// take 2rd kw \"ba\": \"apple\".indexOf(\"ba\")=>-1, \"banana\".indexOf(\"ba\")=>0, data has tags matched \"ba\", => true\n// true && true => true\nexport const searchKeywordsInTagsWithLogicAnd = (keywords, tags) => keywords.reduce((prev, kw) => prev && searchKeywordInTags(kw, tags), true);\n\n// keywords=\"ap ba\" data=[\"apple\",\"pair\"]\n// take 1st kw \"ap\": \"apple\".indexOf(\"ap\")=>0, \"pair\".indexOf(\"ap\")=>-1, data has tags matched \"ap\", => true\n// take 2rd kw \"ba\": \"apple\".indexOf(\"ba\")=>-1, \"pair\".indexOf(\"ba\")=>-1, data has no tags matched \"ba\", => false\n// true || false => true\nexport const searchKeywordsInTagsWithLogicOr = (keywords, tags) => keywords.reduce(\n  (prev, kw) => prev || searchKeywordInTags(kw, tags),\n  false,\n);\n\n/**\n * Search filterKeyword in cellValue\n * @param {string} filterKeyword Search keyword\n * - AND: \"a+b\" to search [\"a\",\"b\"]\n * - OR : \"a b\" to search [\"a\"]\n * @param {string[]} [cellValue] The table cell value\n */\nexport const stringArrayFilter = (filterKeyword, cellValue = []) => {\n  // AND\n  if (filterKeyword.indexOf('+') !== -1) {\n    const keywords = filterKeyword.split('+');\n    return searchKeywordsInTagsWithLogicAnd(keywords, cellValue);\n  }\n\n  // OR\n  if (filterKeyword.indexOf(' ') !== -1) {\n    const keywords = filterKeyword.split(' ');\n    return searchKeywordsInTagsWithLogicOr(keywords, cellValue);\n  }\n\n  return searchStringInArray(filterKeyword, cellValue);\n};\n\nexport const isAllFilterInvalid = (filter, filterColumnIds) => {\n  const validFilter = filterColumnIds.filter((colId) => !!filter[colId]);\n  return validFilter.length === 0;\n};\n\nconst filterFnMapping = {\n  [constants.STRING]: searchKeywordInText,\n  [constants.STRING_ARRAY]: stringArrayFilter,\n};\nconst defaultValueMapping = {\n  [constants.STRING]: '',\n  [constants.STRING_ARRAY]: [],\n};\n\n/**\n * @param {Object} filterKeyVals\n * @param {Column[]} filterColumns The table columns definitions,\n * but only the col which is filterable\n */\nconst searchByFilter = (filterColumns, filterKeyVals) => (row) => filterColumns.reduce((prev, column) => {\n  const keyword = filterKeyVals[column.id];\n  let matched = true;\n  if (keyword) {\n    matched = filterFnMapping[column.type](keyword, row[column.id] || defaultValueMapping[column.type]);\n  }\n  return prev && matched;\n}, true);\n\n/**\n * @param {Object} filterKeyVals\n * @param {Array} originalRows\n * @param {Column[]} filterColumns The table columns definitions,\n * but only the col which is filterable\n * @returns {Array}\n */\nexport const getFilteredData = (filterColumns, filterKeyVals, originalRows) => {\n  if (\n    isAllFilterInvalid(\n      filterKeyVals,\n      filterColumns.map((column) => column.id),\n    )\n  ) {\n    return originalRows;\n  }\n\n  return originalRows.filter(searchByFilter(filterColumns, filterKeyVals));\n};\n\nexport const getSortedData = (originalData, sorter) => [...originalData].sort((a, b) => {\n  const result = (`${a[sorter.columnKey] || ''}`).localeCompare(\n    b[sorter.columnKey] || '',\n  );\n  if (sorter.order === 'ascend') {\n    return result;\n  }\n  return -result; // descend\n});\n\n// https://stackoverflow.com/questions/840781/get-all-non-unique-values-i-e-duplicate-more-than-one-occurrence-in-an-array\nexport const findDuplicates = (arr) => {\n  const sortedArr = arr.slice().sort(); // You can define the comparing function here.\n  // JS by default uses a crappy string compare.\n  // (we use slice to clone the array so the\n  // original array won't be modified)\n  const results = [];\n  for (let i = 0; i < sortedArr.length - 1; i += 1) {\n    if (sortedArr[i + 1] === sortedArr[i]) {\n      results.push(sortedArr[i]);\n    }\n  }\n  return results;\n};\n\n/**\n * @returns {object} e.g. `{\"name\":\"foo\"}`\n */\nexport const getInitialFilter = (filterProp) => {\n  let filter = {\n    // [column.id]: \"\"\n  };\n\n  // init field key with empty value\n  filterProp.forEach((f) => {\n    filter[f.id] = '';\n  });\n\n  const url = new URL(window.location);\n  // init field key with values passing from URL\n  const filterParam = url.searchParams.get('filter');\n\n  if (filterParam && filterParam.startsWith('{')) {\n    try {\n      filter = JSON.parse(filterParam);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Failed to parse filter param from URL, filterParam:',\n        filterParam,\n        ', error:',\n        error,\n      );\n    }\n  }\n\n  return filter;\n};\n\nexport const getInitialSorter = () => {\n  let sorter = {\n    columnKey: '',\n    order: '',\n  };\n  const url = new URL(window.location);\n  const sorterParam = url.searchParams.get('sorter');\n  if (sorterParam && sorterParam.startsWith('{')) {\n    try {\n      sorter = JSON.parse(sorterParam);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Failed to parse filter param from URL, sorter:',\n        sorter,\n        ', error:',\n        error,\n      );\n    }\n  }\n  return sorter;\n};\n\nexport const updateUrl = (states) => {\n  const url = new URL(window.location);\n  Object.keys(states).forEach((stateKey) => {\n    if (typeof states[stateKey] === 'object') {\n      url.searchParams.set(stateKey, JSON.stringify(states[stateKey]));\n      return;\n    }\n    url.searchParams.set(stateKey, states[stateKey]);\n  });\n  window.history.pushState({ ...states }, '', url);\n};\n\nexport const getColumnSortOrder = (columnId, sorter) => {\n  if (sorter.order === undefined) {\n    return false;\n  }\n  if (sorter.columnKey === columnId) {\n    return sorter.order;\n  }\n  return false;\n};\n"],"mappings":"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"}