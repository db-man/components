{"version":3,"file":"index.js","names":["React","useContext","useEffect","useRef","useState","PropTypes","Link","Table","Input","Row","Col","Spin","Popover","Alert","message","Segmented","RightSquareFilled","debounce","PageContext","getColumnRender","findDuplicates","getFilteredData","getSortedData","getInitialFilter","updateUrl","getColumnSortOrder","getInitialSorter","RefTableLinks","constants","ImageCardTable","defaultPage","defaultPageSize","debouncedUpdateUrl","filterCols","columns","filter","col","TableView","ImageView","ListPage","props","tableName","primaryKey","dbName","githubDb","setFilter","sorter","setSorter","columnKey","order","loading","setLoading","errMsg","setErrMsg","rows","setRows","contentTableName","setContentTableName","page","setPage","Number","URL","window","location","href","searchParams","get","pageSize","setPageSize","view","setView","controllerRef","AbortController","getData","current","abort","filteredSortedData","filteredData","undefined","handleKeyDown","e","key","prevPage","length","scrollTo","top","behavior","info","addEventListener","removeEventListener","handleFilterChange","event","prevFilter","newFilter","target","value","handleTableChange","pagination","filters","newSorter","handleCardTableChange","content","getTableRows","signal","error","console","alertDuplicatedRowKey","duplicatedRowKeys","map","item","createElement","style","color","join","alertTableDataInvalid","invalidRows","forEach","row","idx","push","rowIdx","rowData","JSON","stringify","alertValidations","className","getTableColumns","cols","column","TYPE_LIST_PAGE","antdCol","id","title","name","dataIndex","sortOrder","tableProps","renderFn","render","referenceTable","lastRender","val","hasVal","type","STRING_ARRAY","args","trigger","to","pathname","search","renderTable","tip","size","showSorterTooltip","rowKey","dataSource","showQuickJumper","showTotal","total","onChange","gutter","f","span","options","label","imgKey","find","isListPageImageViewKey","propTypes","string","isRequired"],"sources":["../../../src/components/ListPage/index.tsx"],"sourcesContent":["import React, {\n  ChangeEvent,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport {\n  Table,\n  Input,\n  Row,\n  Col,\n  Spin,\n  Popover,\n  Alert,\n  message,\n  Segmented,\n} from 'antd';\nimport type { TableProps, ColumnType as AntdColumnType } from 'antd/es/table';\nimport { RightSquareFilled } from '@ant-design/icons';\n// @ts-ignore TODO: fix types for lodash\nimport debounce from 'lodash.debounce';\n\nimport PageContext, { PageContextType } from '../../contexts/page';\nimport { getColumnRender } from '../../ddRender/ddRender';\nimport {\n  findDuplicates,\n  getFilteredData,\n  getSortedData,\n  getInitialFilter,\n  updateUrl,\n  getColumnSortOrder,\n  getInitialSorter,\n} from './helpers';\nimport RefTableLinks from '../RefTableLinks';\nimport * as constants from '../../constants';\nimport DbColumn from '../../types/DbColumn';\nimport { RowType } from '../../types/Data';\nimport ImageCardTable, { CardTablePagination } from './ImageCardTable';\n\ninterface ListPageProps {\n  tableName: string;\n}\n\nconst defaultPage = 1;\nconst defaultPageSize = 10;\nconst debouncedUpdateUrl = debounce(updateUrl, 500);\n\nconst filterCols = (columns: DbColumn[]) => {\n  return columns.filter((col) => col.filter);\n};\n\nconst TableView = 'table_view';\nconst ImageView = 'image_view';\n\n/**\n * URL params:\n * - page: number\n * - pageSize: number\n * - filter: string\n * - sorter: string\n * - view: string (table_view or image_view)\n */\nconst ListPage = (props: ListPageProps) => {\n  const { columns, tableName, primaryKey, dbName, githubDb } =\n    useContext<PageContextType>(PageContext);\n\n  const [filter, setFilter] = useState<Record<string, string>>({}); // getInitialFilter(filterCols()), cannot get context in constructor\n  const [sorter, setSorter] = useState({\n    columnKey: '', // e.g. \"url\"\n    order: '', //  \"ascend\" or \"descend\" or undefined\n  });\n  const [loading, setLoading] = useState('');\n  const [errMsg, setErrMsg] = useState('');\n  const [rows, setRows] = useState<RowType[] | null>(null);\n  const [contentTableName, setContentTableName] = useState(''); // the current table name of data this.state.rows\n  // TODO to improve this part, how to get initial value from URL?\n  const [page, setPage] = useState(() => {\n    return (\n      Number(new URL(window.location.href).searchParams.get('page')) ||\n      defaultPage\n    );\n  });\n  const [pageSize, setPageSize] = useState(() => {\n    return (\n      Number(new URL(window.location.href).searchParams.get('pageSize')) ||\n      defaultPageSize\n    );\n  });\n  const [view, setView] = useState(() => {\n    return new URL(window.location.href).searchParams.get('view') || TableView;\n  });\n\n  const controllerRef = useRef(new AbortController());\n\n  useEffect(() => {\n    getData(tableName);\n    setFilter(getInitialFilter(filterCols(columns)));\n    setSorter(getInitialSorter());\n\n    return () => {\n      // When your component unmounts\n\n      // Cancel all HTTP requests in this page\n      controllerRef.current.abort();\n    };\n  }, []);\n\n  const filteredSortedData = () => {\n    const filteredData = getFilteredData(\n      filterCols(columns),\n      filter,\n      rows || []\n    );\n    if (sorter.columnKey && sorter.order !== undefined) {\n      return getSortedData(filteredData, sorter);\n    }\n    return filteredData;\n  };\n\n  const handleKeyDown = (e: KeyboardEvent) => {\n    if (e.key === 'ArrowRight') {\n      setPage((prevPage) => {\n        if (prevPage < filteredSortedData().length / pageSize) {\n          window.scrollTo({ top: 0, behavior: 'smooth' });\n          debouncedUpdateUrl({ page: prevPage + 1 });\n          return prevPage + 1;\n        } else {\n          message.info('This is the last page!');\n          return prevPage;\n        }\n      });\n    } else if (e.key === 'ArrowLeft') {\n      setPage((prevPage) => {\n        if (prevPage > 1) {\n          window.scrollTo({ top: 0, behavior: 'smooth' });\n          debouncedUpdateUrl({ page: prevPage - 1 });\n          return prevPage - 1;\n        } else {\n          message.info('This is the first page!');\n          return prevPage;\n        }\n      });\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [rows]);\n\n  useEffect(() => {\n    getData(props.tableName);\n  }, [props.tableName]);\n\n  const handleFilterChange =\n    (key: string) => (event: ChangeEvent<HTMLInputElement>) => {\n      setFilter((prevFilter) => {\n        const newFilter = {\n          ...prevFilter,\n          [key]: event.target.value,\n        };\n        debouncedUpdateUrl({ filter: newFilter });\n        return newFilter;\n      });\n    };\n\n  const handleTableChange: TableProps<RowType>['onChange'] = (\n    pagination,\n    filters,\n    newSorter /* , extra */\n  ) => {\n    setPage(pagination.current || defaultPage);\n    setPageSize(pagination.pageSize || defaultPageSize);\n    setSorter({\n      // @ts-ignore TODO: fix types for antd\n      columnKey: newSorter.columnKey,\n      // @ts-ignore TODO: fix types for antd\n      order: newSorter.order, // order could be undefined\n    });\n    debouncedUpdateUrl({\n      page: pagination.current,\n      pageSize: pagination.pageSize,\n      sorter: {\n        // @ts-ignore TODO: fix types for antd\n        columnKey: newSorter.columnKey,\n        // @ts-ignore TODO: fix types for antd\n        order: newSorter.order, // order could be undefined\n      },\n    });\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  const handleCardTableChange = (pagination: CardTablePagination) => {\n    setPage(pagination.current || defaultPage);\n    setPageSize(pagination.pageSize || defaultPageSize);\n    debouncedUpdateUrl({\n      page: pagination.current,\n      pageSize: pagination.pageSize,\n    });\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  const getData = async (tableName: string) => {\n    setLoading(`Loading ${dbName}/${tableName} ...`);\n    try {\n      const { content } = await githubDb!.getTableRows(\n        dbName,\n        tableName,\n        controllerRef.current.signal\n      );\n      setRows(content);\n      setContentTableName(tableName);\n    } catch (error) {\n      console.error('Failed to get JSON file in List component, error:', error); // eslint-disable-line no-console\n      setErrMsg(`Failed to get data: ${(error as Error).message}`);\n    }\n    setLoading('');\n  };\n\n  const alertDuplicatedRowKey = () => {\n    if (!rows) return null;\n    const duplicatedRowKeys = findDuplicates(\n      rows.map((item) => item[primaryKey])\n    );\n    if (duplicatedRowKeys.length === 0) return null;\n    return (\n      <div style={{ color: 'red' }}>\n        Duplicated row keys(\n        {duplicatedRowKeys.length}\n        ): {duplicatedRowKeys.join(', ')}\n      </div>\n    );\n  };\n\n  const alertTableDataInvalid = () => {\n    const invalidRows: RowType[] = [];\n    if (!rows) return null;\n    rows.forEach((row, idx) => {\n      if (row[primaryKey] === undefined || row[primaryKey] === null) {\n        invalidRows.push({\n          rowIdx: idx,\n          rowData: row,\n        });\n      }\n    });\n    if (invalidRows.length === 0) return null;\n    return (\n      <div style={{ color: 'red' }}>\n        Invalid rows(\n        {invalidRows.length}\n        ):{' '}\n        {invalidRows.map((row) => (\n          <div>\n            {`idx:${row.rowIdx}`} {JSON.stringify(row.rowData)}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const alertValidations = () => (\n    <div className='dm-alert-validations'>\n      {alertDuplicatedRowKey()}\n      {alertTableDataInvalid()}\n    </div>\n  );\n\n  const getTableColumns = () => {\n    const cols = columns\n      .filter((column) => column[constants.TYPE_LIST_PAGE] !== 'HIDE')\n      .map((column) => {\n        // Table component of antd\n        const antdCol: AntdColumnType<RowType> = {\n          key: column.id,\n          title: column.name,\n          dataIndex: column.id,\n          // Order of sorted values: 'ascend', 'descend', false\n          sortOrder: getColumnSortOrder(column.id, sorter),\n          sorter: true,\n          ...column.tableProps,\n        };\n\n        const renderFn = getColumnRender(constants.TYPE_LIST_PAGE, column);\n        if (renderFn) {\n          antdCol.render = renderFn;\n        }\n\n        if (column.referenceTable) {\n          const lastRender = antdCol.render || ((val: any) => val);\n          const hasVal = (val: string | string[]) => {\n            if (column.type === constants.STRING_ARRAY) {\n              if (!val || val.length === 0) return false;\n              return true;\n            }\n            return !!val;\n          };\n          // If this column has ref table, then render links to ref table item\n          antdCol.render = (...args: any /* value, record, index */) => (\n            <div>\n              {/* @ts-ignore TODO Ignore error: TS2556: A spread argument must either have a tuple type or be passed to a rest parameter. */}\n              {lastRender(...args)}{' '}\n              {hasVal(args[0]) && (\n                <Popover\n                  title='Ref Table Links'\n                  trigger='click'\n                  content={<RefTableLinks value={args[0]} column={column} />}\n                >\n                  <RightSquareFilled />\n                </Popover>\n              )}\n            </div>\n          );\n        }\n\n        return antdCol;\n      });\n\n    // common columns\n    cols.push({\n      key: 'createdAt',\n      title: 'createdAt',\n      dataIndex: 'createdAt',\n      sortOrder: getColumnSortOrder('createdAt', sorter),\n      sorter: true,\n    });\n    cols.push({\n      key: 'updatedAt',\n      title: 'updatedAt',\n      dataIndex: 'updatedAt',\n      sortOrder: getColumnSortOrder('updatedAt', sorter),\n      sorter: true,\n    });\n    cols.push({\n      key: 'actions',\n      dataIndex: primaryKey,\n      title: 'Actions',\n      render: (id: string) => (\n        <div>\n          <Link\n            to={{\n              pathname: `/${dbName}/${tableName}/update`,\n              search: `?${primaryKey}=${id}`,\n            }}\n          >\n            Update\n          </Link>{' '}\n          |{' '}\n          <Link\n            to={{\n              pathname: `/${dbName}/${tableName}/get`,\n              search: `?${primaryKey}=${id}`,\n            }}\n          >\n            Detail\n          </Link>\n        </div>\n      ),\n    });\n    return cols;\n  };\n\n  const renderTable = () => {\n    if (loading) return <Spin tip={loading}>Loading...</Spin>;\n    if (errMsg) return <Alert message={errMsg} type='error' />;\n    if (!rows) return null;\n    // When router changed, before loading next table rows,\n    // contentTableName is old table, but this.props.tableName is new table.\n    if (contentTableName !== tableName) return null;\n    return (\n      <div>\n        {alertValidations()}\n        <Table\n          size='small'\n          showSorterTooltip={false}\n          rowKey={primaryKey}\n          columns={getTableColumns()}\n          dataSource={filteredSortedData()}\n          pagination={{\n            current: page,\n            pageSize,\n            // total: filteredSortedData().length,\n            showQuickJumper: true,\n            showTotal: (total) => `Total ${total} items`,\n          }}\n          onChange={handleTableChange}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div className='dm-list-page list-component'>\n      <div className='dm-table-filter'>\n        <Row gutter={10}>\n          {filterCols(columns).map((f) => (\n            <Col key={f.id} span={6}>\n              {f.name}\n              :\n              <Input\n                size='small'\n                value={filter[f.id]}\n                onChange={handleFilterChange(f.id)}\n              />\n            </Col>\n          ))}\n        </Row>\n      </div>\n      <Segmented\n        value={view}\n        options={[\n          {\n            label: 'Table View',\n            value: TableView,\n          },\n          {\n            label: 'Image View',\n            value: ImageView,\n          },\n        ]}\n        onChange={(val) => {\n          setView(val + '');\n          debouncedUpdateUrl({ view: val });\n        }}\n      />\n      {view === TableView ? (\n        renderTable()\n      ) : (\n        <ImageCardTable\n          imgKey={columns.find((col) => col.isListPageImageViewKey)?.id}\n          dataSource={filteredSortedData()}\n          pagination={{\n            current: page,\n            pageSize,\n          }}\n          onChange={handleCardTableChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ListPage;\n\nListPage.propTypes = {\n  // Even tableName is now passing from context,\n  // but we need to pass props.tableName to get new data from backend API\n  tableName: PropTypes.string.isRequired,\n};\n"],"mappings":"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"}