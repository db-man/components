{"version":3,"file":"helpers.js","names":["validatePrimaryKey","value","content","primaryKey","found","find","item","isType","column","uiType","type","Array","isArray","is","preview","obj2str","obj","JSON","stringify","str2obj","str","parse","getFormInitialValues","columns","formValues","initFormValues","forEach","col","id","defaultValue","enum"],"sources":["../../../src/components/Form/helpers.ts"],"sourcesContent":["import { ValueType } from '.';\nimport Column from '../../types/Column';\nimport { UiType } from '../../types/UiType';\n\n/**\n * Check duplicated primary key\n * For example, if `id` is primary key, then there should not be two id=1 record in table\n */\nexport const validatePrimaryKey = (\n  value: string,\n  content: ValueType[],\n  primaryKey: string\n) => {\n  const found = content.find((item) => item[primaryKey] === value);\n  if (found) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * @param {*} column\n * @param {string} uiType e.g. \"MultiLineInputBox\"\n * @returns {is:bool,preview:bool}\n */\nexport const isType = (column: Column, uiType: UiType) => {\n  // type=\"MultiLineInputBox\"\n  // type=[\"MultiLineInputBox\"]\n  // type=[\"MultiLineInputBox\", \"WithPreview\"]\n  const type = column['type:createUpdatePage'];\n  if (Array.isArray(type)) {\n    const is = type[0] === uiType;\n    const preview = type[1] === 'WithPreview';\n    return { is, preview };\n  }\n  const is = column['type:createUpdatePage'] === uiType;\n  return { is, preview: false };\n};\n\nexport const obj2str = (obj: ValueType) => JSON.stringify(obj, null, '  ');\nexport const str2obj = (str: string) => JSON.parse(str) as ValueType;\n\nexport const getFormInitialValues = (\n  columns: Column[],\n  formValues: ValueType\n) => {\n  const initFormValues: {\n    [key: string]: any;\n  } = {};\n  // Initialize form values with default values defined in table schema when form values are empty\n  columns.forEach((col: Column) => {\n    if (!formValues[col.id]) {\n      let defaultValue = '';\n      switch (col['type:createUpdatePage']) {\n        case 'RadioGroup':\n          [defaultValue] = col.enum!;\n          break;\n        default:\n          defaultValue = '';\n      }\n      if (defaultValue) {\n        initFormValues[col.id] = defaultValue;\n      }\n    }\n  });\n  return initFormValues;\n};\n"],"mappings":"AAIA;AACA;AACA;AACA;AACA,OAAO,MAAMA,kBAAkB,GAAGA,CAChCC,KAAa,EACbC,OAAoB,EACpBC,UAAkB,KACf;EACH,MAAMC,KAAK,GAAGF,OAAO,CAACG,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACH,UAAU,CAAC,KAAKF,KAAK,CAAC;EAChE,IAAIG,KAAK,EAAE;IACT,OAAO,KAAK;EACd;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,MAAM,GAAGA,CAACC,MAAc,EAAEC,MAAc,KAAK;EACxD;EACA;EACA;EACA,MAAMC,IAAI,GAAGF,MAAM,CAAC,uBAAuB,CAAC;EAC5C,IAAIG,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;IACvB,MAAMG,EAAE,GAAGH,IAAI,CAAC,CAAC,CAAC,KAAKD,MAAM;IAC7B,MAAMK,OAAO,GAAGJ,IAAI,CAAC,CAAC,CAAC,KAAK,aAAa;IACzC,OAAO;MAAEG,EAAE;MAAEC;IAAQ,CAAC;EACxB;EACA,MAAMD,EAAE,GAAGL,MAAM,CAAC,uBAAuB,CAAC,KAAKC,MAAM;EACrD,OAAO;IAAEI,EAAE;IAAEC,OAAO,EAAE;EAAM,CAAC;AAC/B,CAAC;AAED,OAAO,MAAMC,OAAO,GAAIC,GAAc,IAAKC,IAAI,CAACC,SAAS,CAACF,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;AAC1E,OAAO,MAAMG,OAAO,GAAIC,GAAW,IAAKH,IAAI,CAACI,KAAK,CAACD,GAAG,CAAc;AAEpE,OAAO,MAAME,oBAAoB,GAAGA,CAClCC,OAAiB,EACjBC,UAAqB,KAClB;EACH,MAAMC,cAEL,GAAG,CAAC,CAAC;EACN;EACAF,OAAO,CAACG,OAAO,CAAEC,GAAW,IAAK;IAC/B,IAAI,CAACH,UAAU,CAACG,GAAG,CAACC,EAAE,CAAC,EAAE;MACvB,IAAIC,YAAY,GAAG,EAAE;MACrB,QAAQF,GAAG,CAAC,uBAAuB,CAAC;QAClC,KAAK,YAAY;UACf,CAACE,YAAY,CAAC,GAAGF,GAAG,CAACG,IAAK;UAC1B;QACF;UACED,YAAY,GAAG,EAAE;MACrB;MACA,IAAIA,YAAY,EAAE;QAChBJ,cAAc,CAACE,GAAG,CAACC,EAAE,CAAC,GAAGC,YAAY;MACvC;IACF;EACF,CAAC,CAAC;EACF,OAAOJ,cAAc;AACvB,CAAC"}