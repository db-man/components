{"version":3,"file":"CreatePage.js","names":["React","message","Spin","Alert","utils","githubUtils","validatePrimaryKey","SuccessMessage","Form","PageContext","constants","CreatePage","Component","constructor","props","_defineProperty","formValues","isSplitTable","updateTableFileAsync","createRecordFileAsync","newContent","state","rows","formValidation","time","formatDate","Date","push","createdAt","updatedAt","setState","saveLoading","commit","context","githubDb","updateTableFile","dbName","tableName","tableFileSha","success","createElement","url","html_url","err","console","error","errorMessage","primaryKey","recordFileSha","record","updateRecordFile","ps","getTableFileAsync","Promise","all","tableFileLoading","content","sha","getTableRows","fields","columns","filter","col","getUrlParams","id","forEach","type","STRING_ARRAY","warnPrimaryKeyInvalid","value","warning","href","defaultFormValues","componentDidMount","getData","getInitialFormFields","loading","appModes","indexOf","render","className","spinning","tip","getDataUrl","target","rel","defaultValues","onSubmit","handleFormSubmit","contextType"],"sources":["../../src/components/CreatePage.tsx"],"sourcesContent":["// @ts-nocheck\n\n/* eslint-disable react/destructuring-assignment, no-console, max-len, react/no-unused-class-component-methods */\n\nimport React from 'react';\nimport { message, Spin, Alert } from 'antd';\nimport { utils as githubUtils } from '@db-man/github';\n\nimport { validatePrimaryKey } from './Form/helpers';\nimport SuccessMessage from './SuccessMessage';\nimport * as utils from '../utils';\nimport Form from './Form';\nimport PageContext from '../contexts/page';\nimport * as constants from '../constants';\n\nexport default class CreatePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      errorMessage: '',\n      // all rows in table file\n      tableFileLoading: false,\n      // all rows in whole table, in split table mode, it's empty\n      rows: [],\n      tableFileSha: null,\n\n      defaultFormValues: null,\n\n      saveLoading: false,\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n\n    const fields = this.getInitialFormFields();\n    this.setState({\n      defaultFormValues: {\n        ...fields,\n      },\n    });\n  }\n\n  // `updateTableFileAsync` to update the whole table file, it's too big, and take more time to get the response from server\n  // `createRecordFileAsync` to only create record file, file is small, so get response quickly, but backend (github action) need to merge records into big table file\n  handleFormSubmit = (formValues) => {\n    if (!this.isSplitTable) {\n      this.updateTableFileAsync(formValues);\n    } else {\n      this.createRecordFileAsync(formValues);\n    }\n  };\n\n  get loading() {\n    return this.state.tableFileLoading;\n  }\n\n  get isSplitTable() {\n    const { appModes } = this.context;\n    return appModes.indexOf('split-table') !== -1;\n  }\n\n  updateTableFileAsync = async (formValues) => {\n    const newContent = [...this.state.rows];\n\n    if (!this.formValidation(this.state.rows, formValues)) {\n      return;\n    }\n\n    const time = githubUtils.formatDate(new Date());\n    newContent.push({\n      ...formValues,\n      createdAt: time,\n      updatedAt: time,\n    });\n\n    this.setState({ saveLoading: true });\n    try {\n      const { commit } = await this.context.githubDb.updateTableFile(\n        this.context.dbName,\n        this.context.tableName,\n        newContent,\n        this.state.tableFileSha,\n      );\n\n      message.success(<SuccessMessage url={commit.html_url} />, 10);\n    } catch (err) {\n      console.error('updateTableFile, err:', err);\n      this.setState({\n        errorMessage: 'Failed to update table file on server!',\n      });\n    }\n\n    this.setState({ saveLoading: false });\n  };\n\n  createRecordFileAsync = async (formValues) => {\n    const { dbName, tableName, primaryKey } = this.context;\n    const { recordFileSha } = this.state;\n\n    const time = githubUtils.formatDate(new Date());\n    const record = {\n      ...formValues,\n      createdAt: time,\n      updatedAt: time,\n    };\n\n    this.setState({ saveLoading: true });\n    try {\n      const { commit } = await this.context.githubDb.updateRecordFile(\n        dbName,\n        tableName,\n        primaryKey,\n        record,\n        recordFileSha,\n      );\n\n      message.success(<SuccessMessage url={commit.html_url} />, 10);\n    } catch (err) {\n      console.error('updateRecordFile, err:', err);\n      this.setState({\n        errorMessage: 'Failed to create record file on server!',\n      });\n    }\n\n    this.setState({ saveLoading: false });\n  };\n\n  // Get single record file, the whole table file will be used to de-dup\n  getData = () => {\n    const ps = [];\n    // Whole table file is too big, so only get it when it's not split table\n    if (!this.isSplitTable) {\n      ps.push(this.getTableFileAsync());\n    }\n    Promise.all(ps);\n  };\n\n  getTableFileAsync = async () => {\n    this.setState({ tableFileLoading: true });\n    try {\n      const { content: rows, sha: tableFileSha } =\n        await this.context.githubDb.getTableRows(\n          this.context.dbName,\n          this.context.tableName,\n        );\n      this.setState({\n        rows,\n        tableFileSha,\n      });\n    } catch (err) {\n      console.error('getTableRows, error:', err);\n      this.setState({ errorMessage: 'Failed to get table file from server!' });\n    }\n    this.setState({ tableFileLoading: false });\n  };\n\n  // Create the initial form fields\n  getInitialFormFields = () => {\n    const fields = {};\n\n    // Fill the form field with URL params\n    this.context.columns\n      .filter((col) => utils.getUrlParams()[col.id])\n      .forEach((col) => {\n        if (col.type === constants.STRING_ARRAY) {\n          fields[col.id] = [utils.getUrlParams()[col.id]];\n        } else {\n          fields[col.id] = utils.getUrlParams()[col.id];\n        }\n      });\n\n    return fields;\n  };\n\n  formValidation = (rows, formValues) => {\n    if (\n      !validatePrimaryKey(\n        formValues[this.context.primaryKey],\n        rows,\n        this.context.primaryKey,\n      )\n    ) {\n      this.warnPrimaryKeyInvalid(formValues[this.context.primaryKey]);\n      return false;\n    }\n    return true;\n  };\n\n  warnPrimaryKeyInvalid = (value) =>\n    message.warning(\n      <div>\n        Found duplicated item in db{' '}\n        <a\n          href={`/${this.context.dbName}/${this.context.tableName}/update?${this.context.primaryKey}=${value}`}\n        >\n          {value}\n        </a>\n      </div>,\n      10,\n    );\n\n  render() {\n    const { dbName, tableName } = this.context;\n\n    if (this.state.defaultFormValues === null) {\n      return null;\n    }\n\n    return (\n      <div className=\"dm-page\">\n        <h1>\n          Create {dbName} {tableName}\n        </h1>\n        <div className=\"create-page-body-component\">\n          <Spin\n            spinning={this.loading}\n            tip={(\n              <div>\n                Loading file:{' '}\n                <a\n                  href={this.context.githubDb.getDataUrl(dbName, tableName)}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  {dbName}/{tableName}\n                </a>\n              </div>\n            )}\n          >\n            {this.state.errorMessage && (\n              <Alert message={this.state.errorMessage} type=\"error\" />\n            )}\n            <Form\n              defaultValues={this.state.defaultFormValues}\n              rows={this.state.rows}\n              loading={this.state.saveLoading}\n              onSubmit={this.handleFormSubmit}\n            />\n          </Spin>\n        </div>\n      </div>\n    );\n  }\n}\n\nCreatePage.contextType = PageContext;\n"],"mappings":"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"}