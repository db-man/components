{"version":3,"file":"index.js","names":["React","message","Alert","Spin","utils","PageContext","Detail","GetPageBody","Component","constructor","props","_defineProperty","dbName","tableName","context","githubDb","getTableRows","then","content","tableRows","setState","contentLoaded","record","getInitialFormFields","catch","err","console","error","getRecordFileContentAndSha","currentId","contentLoading","ps","isSplitTable","push","getSingleRecordAsync","getTableRowsAsync","getRefTablePromises","columns","filter","referenceTable","map","refTables","state","debug","Promise","all","finally","foundRows","item","primaryKey","getUrlParams","length","errorMessage","createElement","type","defaultValues","tables","componentDidMount","fetchData","appModes","indexOf","render","className","renderAlert","renderDetail","contextType"],"sources":["../../../src/components/GetPageBody/index.tsx"],"sourcesContent":["// @ts-nocheck\n\n/* eslint-disable react/destructuring-assignment, no-console, max-len */\n\nimport React from 'react';\nimport { message, Alert, Spin } from 'antd';\nimport * as utils from '../../utils';\nimport PageContext from '../../contexts/page';\n\nimport Detail from './Detail';\n\nexport default class GetPageBody extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contentLoading: false,\n      contentLoaded: false,\n      refTables: {},\n\n      errorMessage: '',\n\n      // One record in table rows\n      record: {},\n    };\n  }\n\n  componentDidMount() {\n    const { dbName, tableName } = this.context;\n    this.fetchData(dbName, tableName);\n  }\n\n  // componentDidUpdate(prevProps) {\n  //   // When URL changed, dbName or tableName changed, then load data from backend\n  //   if (\n  //     this.context.dbName !== prevProps.dbName\n  //     || this.context.tableName !== prevProps.tableName\n  //   ) {\n  //     this.fetchData(this.context.dbName, this.context.tableName);\n  //   }\n  // }\n\n  get isSplitTable() {\n    const { appModes } = this.context;\n    return appModes.indexOf('split-table') !== -1;\n  }\n\n  /**\n   * If primary key is \"itemId\", and this field value is \"foo\", then return \"foo\"\n   */\n  get currentId() {\n    return utils.getUrlParams()[this.context.primaryKey];\n  }\n\n  getTableRowsAsync = async ({ dbName, tableName }) => {\n    return this.context.githubDb\n      .getTableRows(dbName, tableName)\n      .then(({ content }) => {\n        return content;\n      })\n      .then((tableRows) => {\n        this.setState({\n          contentLoaded: true,\n          record: this.getInitialFormFields(tableRows),\n        });\n      })\n      .catch((err) => {\n        console.error('getTableRows failed, err:', err);\n        message.error('something wrong in getTableRows');\n      });\n  };\n\n  getSingleRecordAsync = async ({ dbName, tableName }) => {\n    return this.context.githubDb\n      .getRecordFileContentAndSha(dbName, tableName, this.currentId)\n      .then(({ content }) => {\n        this.setState({\n          contentLoaded: true,\n          record: content,\n        });\n      })\n      .catch((err) => {\n        console.error('githubDb.getRecordFileContentAndSha failed, err:', err);\n        message.error('something wrong in githubDb.getRecordFileContentAndSha');\n      });\n  };\n\n  fetchData = (dbName, tableName) => {\n    this.setState({ contentLoading: true });\n    const ps = [];\n\n    if (this.isSplitTable) {\n      ps.push(this.getSingleRecordAsync({ dbName, tableName }));\n    } else {\n      ps.push(this.getTableRowsAsync({ dbName, tableName }));\n    }\n\n    const getRefTablePromises = this.context.columns\n      .filter(({ referenceTable }) => referenceTable)\n      .map(({ referenceTable }) => {\n        return this.context.githubDb\n          .getTableRows(dbName, referenceTable)\n          .then(({ content }) => {\n            const { refTables } = this.state;\n            refTables[`ref:${referenceTable}:rows`] = content; // TODO\n            this.setState({\n              refTables,\n            });\n          });\n      });\n\n    console.debug('Start getting all table data...');\n    Promise.all([...ps, ...getRefTablePromises])\n      .then(() => {\n        console.debug('Finish getting all table data...');\n      })\n      .finally(() => {\n        this.setState({ contentLoading: false });\n      });\n  };\n\n  // Create the initial form fields according to whether create/update.\n  getInitialFormFields = (tableRows) => {\n    const foundRows = tableRows.filter(\n      (item) =>\n        item[this.context.primaryKey] ===\n        utils.getUrlParams()[this.context.primaryKey],\n    );\n\n    if (foundRows.length === 0) {\n      this.setState({ errorMessage: 'item not found in db' });\n      return null;\n    }\n    if (foundRows.length > 1) {\n      this.setState({ errorMessage: 'more than 1 rows' });\n      return null;\n    }\n\n    return {\n      ...foundRows[0],\n    };\n  };\n\n  renderAlert = () =>\n    this.state.errorMessage && (\n      <Alert message={this.state.errorMessage} type=\"error\" />\n    );\n\n  renderDetail = () => {\n    if (this.state.record === null) {\n      return null;\n    }\n    return (\n      <Detail\n        defaultValues={this.state.record}\n        tables={this.context.tables}\n        refTables={this.state.refTables}\n      />\n    );\n  };\n\n  render() {\n    if (this.state.contentLoading) {\n      return <Spin />;\n    }\n\n    if (!this.state.contentLoaded) {\n      return null;\n    }\n\n    return (\n      <div className=\"get-body-component\">\n        {this.renderAlert()}\n        {this.renderDetail()}\n      </div>\n    );\n  }\n}\n\nGetPageBody.contextType = PageContext;\n"],"mappings":"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"}