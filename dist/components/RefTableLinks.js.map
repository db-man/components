{"version":3,"file":"RefTableLinks.js","names":["React","useContext","PropTypes","List","Link","PageContext","columnType","useAppContext","RefTableLinks","value","column","dbs","dbName","ids","Array","isArray","foundRefTable","find","tb","name","referenceTable","createElement","foundRefTableColumn","columns","col","primary","refTablePrimaryKey","id","className","size","dataSource","renderItem","Item","to","propTypes","oneOfType","string","arrayOf","isRequired"],"sources":["../../src/components/RefTableLinks.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'antd';\nimport { Link } from 'react-router-dom';\n\nimport PageContext from '../contexts/page';\nimport { columnType } from './types';\nimport { useAppContext } from '../contexts/AppContext';\nimport DbColumn from '../types/DbColumn';\n\nexport default function RefTableLinks({\n  value,\n  column,\n}: {\n  value: string | string[] | null;\n  column: DbColumn;\n}) {\n  const { dbs } = useAppContext();\n  const { dbName } = useContext(PageContext);\n  // val can be \"123\" or [\"123\", \"456\"]\n  let ids = [];\n  if (Array.isArray(value)) {\n    ids = value;\n  } else {\n    ids = value === null ? [] : [value];\n  }\n  const foundRefTable = dbs[dbName].find(\n    (tb) => tb.name === column.referenceTable\n  );\n  if (!foundRefTable) {\n    return <div>Ref table not found</div>;\n  }\n  const foundRefTableColumn = foundRefTable.columns.find((col) => col.primary);\n  if (!foundRefTableColumn) {\n    return <div>Ref table primary column not found</div>;\n  }\n  const refTablePrimaryKey = foundRefTableColumn.id;\n  return (\n    <span className='ref-table'>\n      <List\n        size='small'\n        dataSource={ids}\n        renderItem={(id) => (\n          <List.Item>\n            <Link\n              to={`/${dbName}/${column.referenceTable}/get?${refTablePrimaryKey}=${id}`}\n            >\n              {id}\n            </Link>\n          </List.Item>\n        )}\n      />\n    </span>\n  );\n}\n\nRefTableLinks.propTypes = {\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]).isRequired,\n  column: columnType.isRequired,\n};\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,IAAI,QAAQ,MAAM;AAC3B,SAASC,IAAI,QAAQ,kBAAkB;AAEvC,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,SAASC,UAAU,QAAQ,SAAS;AACpC,SAASC,aAAa,QAAQ,wBAAwB;AAGtD,eAAe,SAASC,aAAaA,CAAC;EACpCC,KAAK;EACLC;AAIF,CAAC,EAAE;EACD,MAAM;IAAEC;EAAI,CAAC,GAAGJ,aAAa,CAAC,CAAC;EAC/B,MAAM;IAAEK;EAAO,CAAC,GAAGX,UAAU,CAACI,WAAW,CAAC;EAC1C;EACA,IAAIQ,GAAG,GAAG,EAAE;EACZ,IAAIC,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC,EAAE;IACxBI,GAAG,GAAGJ,KAAK;EACb,CAAC,MAAM;IACLI,GAAG,GAAGJ,KAAK,KAAK,IAAI,GAAG,EAAE,GAAG,CAACA,KAAK,CAAC;EACrC;EACA,MAAMO,aAAa,GAAGL,GAAG,CAACC,MAAM,CAAC,CAACK,IAAI,CACnCC,EAAE,IAAKA,EAAE,CAACC,IAAI,KAAKT,MAAM,CAACU,cAC7B,CAAC;EACD,IAAI,CAACJ,aAAa,EAAE;IAClB,oBAAOhB,KAAA,CAAAqB,aAAA,cAAK,qBAAwB,CAAC;EACvC;EACA,MAAMC,mBAAmB,GAAGN,aAAa,CAACO,OAAO,CAACN,IAAI,CAAEO,GAAG,IAAKA,GAAG,CAACC,OAAO,CAAC;EAC5E,IAAI,CAACH,mBAAmB,EAAE;IACxB,oBAAOtB,KAAA,CAAAqB,aAAA,cAAK,oCAAuC,CAAC;EACtD;EACA,MAAMK,kBAAkB,GAAGJ,mBAAmB,CAACK,EAAE;EACjD,oBACE3B,KAAA,CAAAqB,aAAA;IAAMO,SAAS,EAAC;EAAW,gBACzB5B,KAAA,CAAAqB,aAAA,CAAClB,IAAI;IACH0B,IAAI,EAAC,OAAO;IACZC,UAAU,EAAEjB,GAAI;IAChBkB,UAAU,EAAGJ,EAAE,iBACb3B,KAAA,CAAAqB,aAAA,CAAClB,IAAI,CAAC6B,IAAI,qBACRhC,KAAA,CAAAqB,aAAA,CAACjB,IAAI;MACH6B,EAAE,EAAG,IAAGrB,MAAO,IAAGF,MAAM,CAACU,cAAe,QAAOM,kBAAmB,IAAGC,EAAG;IAAE,GAEzEA,EACG,CACG;EACX,CACH,CACG,CAAC;AAEX;AAEAnB,aAAa,CAAC0B,SAAS,GAAG;EACxBzB,KAAK,EAAEP,SAAS,CAACiC,SAAS,CAAC,CACzBjC,SAAS,CAACkC,MAAM,EAChBlC,SAAS,CAACmC,OAAO,CAACnC,SAAS,CAACkC,MAAM,CAAC,CACpC,CAAC,CAACE,UAAU;EACb5B,MAAM,EAAEJ,UAAU,CAACgC;AACrB,CAAC"}