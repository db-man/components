{"version":3,"file":"helpers.js","names":["message","constants","errMsg","loadDbsSchemaAsync","github","githubDb","path","files","getPath","dbsSchema","Promise","all","map","name","dbName","getDbTablesSchemaAsync","then","tables","validateDbsSchame","errors","Object","keys","forEach","table","index","push","columns","column","colIndex","id","type","length","warning","join","reloadDbsSchemaAsync","info","localStorage","getItem","LS_KEY_GITHUB_REPO_PATH","err","LS_KEY_GITHUB_OWNER","LS_KEY_GITHUB_REPO_NAME","error","setItem","LS_KEY_DBS_SCHEMA","JSON","stringify","setTimeout","window","location","reload"],"sources":["../../src/pages/helpers.ts"],"sourcesContent":["// @ts-nocheck\n\nimport { message } from 'antd';\nimport * as constants from '../constants';\nimport { errMsg } from '../utils';\n\nconst loadDbsSchemaAsync = async (github, githubDb, path) => {\n  // Get all db names in root dir, db name is sub dir name\n  const files = await github.getPath(path);\n\n  const dbsSchema = {\n    /**\n     * key must be:\n     * - Top Nav title name\n     * - Folder name in https://github.com/{user_name}/{repo_name}/tree/main/{path}\n     */\n    // dbName: [{ name: \"table_name\", columns: [] }]\n  };\n\n  // Loop get all table schema\n  await Promise.all(\n    files\n      .map(({ name }) => name)\n      .map((dbName) =>\n        githubDb.getDbTablesSchemaAsync(dbName).then((tables) => {\n          dbsSchema[dbName] = tables;\n        })\n      )\n  );\n\n  return dbsSchema;\n};\n\nconst validateDbsSchame = (dbsSchema) => {\n  const errors = [];\n  Object.keys(dbsSchema).forEach((dbName) => {\n    const tables = dbsSchema[dbName];\n    tables.forEach((table, index) => {\n      if (!table.name) {\n        errors.push(`Missing table name, dbName:${dbName}, index:${index}`);\n      }\n      if (!table.columns) {\n        errors.push(\n          `Missing table columns, tableName: ${table.name}, dbName:${dbName}`\n        );\n      }\n      table.columns.forEach((column, colIndex) => {\n        if (!column.id) {\n          errors.push(\n            `Missing column id, tableName: ${table.name}, dbName:${dbName}, colIndex:${colIndex}`\n          );\n        }\n        if (!column.name) {\n          errors.push(\n            `Missing column name, tableName: ${table.name}, dbName:${dbName}, colIndex:${colIndex}`\n          );\n        }\n        if (!column.type) {\n          errors.push(\n            `Missing column type, tableName: ${table.name}, dbName:${dbName}, colIndex:${colIndex}`\n          );\n        }\n      });\n    });\n  });\n\n  if (errors.length) {\n    message.warning(errors.join('\\n'), 20);\n  }\n\n  return errors.length === 0;\n};\n\nconst reloadDbsSchemaAsync = async (github, githubDb) => {\n  message.info('Start loading DBs schema...');\n\n  const path = localStorage.getItem(constants.LS_KEY_GITHUB_REPO_PATH);\n  if (!path) {\n    errMsg('Repo path not found in localStorage!');\n    return;\n  }\n\n  let dbsSchema;\n  try {\n    dbsSchema = await loadDbsSchemaAsync(github, githubDb, path);\n  } catch (err) {\n    errMsg(\n      `Failed to get DB schema! Maybe you need to create this file: https://github.com/${localStorage.getItem(\n        constants.LS_KEY_GITHUB_OWNER\n      )}/${localStorage.getItem(constants.LS_KEY_GITHUB_REPO_NAME)}/${path}`,\n      err\n    );\n    return;\n  }\n\n  if (!validateDbsSchame(dbsSchema)) {\n    message.error('DB schema is invalid! Will not save to localStorage!');\n    return;\n  }\n\n  localStorage.setItem(constants.LS_KEY_DBS_SCHEMA, JSON.stringify(dbsSchema));\n  message.info('Finish loading DBs schema! Will reload window in 3s!');\n  setTimeout(() => {\n    window.location.reload();\n  }, 3000);\n};\n\nexport default reloadDbsSchemaAsync;\n"],"mappings":"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"}